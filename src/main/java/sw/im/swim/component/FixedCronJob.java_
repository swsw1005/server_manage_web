package sw.im.swim.component;

import kr.swim.util.process.ProcessExecutor;
import kr.swim.util.system.NetworkIpInfo;
import kr.swim.util.system.PublicIpInfo;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;
import sw.im.swim.bean.enums.AdminLogType;
import sw.im.swim.config.GeneralConfig;
import sw.im.swim.service.*;
import sw.im.swim.util.dns.GoogleDNSUtil;
import sw.im.swim.worker.context.ThreadWorkerPoolContext;
import sw.im.swim.worker.database.DatabaseBackupProducer;
import sw.im.swim.worker.noti.AdminLogEmailWorker;
import sw.im.swim.worker.speedtest.SpeedTestProducer;
import sw.im.swim.worker.speedtest.SpeedTestWorker;

import java.io.File;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

@Slf4j
@Component
@RequiredArgsConstructor
public class FixedCronJob {

    @Scheduled(cron = "0/10 * * * * *")
    public void dynamicDomainCheck() {

        try {
            GoogleDNSUtil DNSUtil = GoogleDNSUtil.getInstance();

            String IP = PublicIpInfo.getPublicIp();
            IP.length();

            String currIp = GeneralConfig.CURRENT_IP;

            log.debug("?? IP CHANGE ?? :: " + currIp + "  =>  " + IP);

            GeneralConfig.CURRENT_IP = IP;

            if (currIp.length() > 4 && currIp.equals(IP) == false) {

                log.warn("!! IP CHANGE !! :: " + currIp + "  =>  " + IP);

                try {
                    GeneralConfig.PUBLIC_IP_INFO = NetworkIpInfo.getInstance();
                } catch (Exception e) {
                    log.error(e + "  " + e.getMessage(), e);
                }

                if (GeneralConfig.ADMIN_SETTING.isDNS_UPDATE()) {
                    final String ROOT_DOMAIN = GeneralConfig.ADMIN_SETTING.getROOT_DOMAIN();

                    DNSUtil.updateIp(ROOT_DOMAIN);
//                    adminLogService.insertLog(AdminLogType.DNS, "SUCCESS", " IP CHANGE [" + currIp + "] > [" + IP + "]");
                }

            }

        } catch (Exception e) {
//            adminLogService.insertLog(AdminLogType.DNS, "FAIL", e.getLocalizedMessage());
        }

    }


    @Scheduled(cron = "0/5 * * * * *")
    public void databaseServerBackup() {
//        ThreadWorkerPoolContext.getInstance().DB_SERVER_WORKER.execute(new DatabaseBackupProducer(adminLogService, databaseServerService));
//        ThreadWorkerPoolContext.getInstance().NOTI_WORKER.execute(new AdminLogEmailWorker(adminLogService));
//        ThreadWorkerPoolContext.getInstance().DEFAULT_WORKER.execute(new SpeedTestProducer(speedTestService));

        /**
         * TODO  auto insert new admin
         *
         * 1. check certain file
         * 2. if file exist, read and delete file
         * 3. read id, password, name
         * 4. insert as new admin
         * 5. if exisy, update
         *
         */
    }




    @Scheduled(cron = "5 5 1 * * *")
    public void speedtestCliListUpdate() {
//        try {
//
//            final String[] arr = {"sh", "-c", "speedtest-cli --list"};
//
//            List<String> list = ProcessExecutor.runCommand(arr);
//
//            for (String line : list) {
//                speedTestService.saveServer(line);
//            }
//
//        } catch (Exception e) {
//            log.error(e + " | " + e.getMessage());
//        }

    }

}
